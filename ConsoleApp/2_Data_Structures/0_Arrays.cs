
// МАССИВЫ
// Массивы представляют собой набор элементов одного типа, следующих в памяти друг за другом
// Благодаря этому у массивов быстрый доступ к элементам (О(1)), но они имеют фиксированную длину, которую нельзя изменить после создания



public class Arrays
{
    public static void Main()
    {
        // ОДНОМЕРНЫЕ МАССИВЫ
        // Объявление и инициализация
        int[] numbers1;                                // Объявление массива (значение null)
        numbers1 = new int[5];                         // Инициализация массива (значения 0)
        int[] numbers2 = new int[5];                   // Объявление + инициализация
        int[] numbers3 = new int[5] {1, 2, 3, 4, 5};   // Инициализация сразу со значением
        int[] numbers4 = new int[] {1, 2, 3, 4, 5};    // Инициализация сразу со значением
        int[] numbers5 = {1, 2, 3, 4, 5};              // Сокращённая запись
        var numbers6 = new int[] {1, 2, 3, 4, 5};      // Использование var
        
        // Доступ к элементам и запись
        int[] numbers = {1, 2, 3, 4, 5};
        int first = numbers[0];          // У первого элемента индекс 0
        int second = numbers[1];
        int last = numbers[4];           // У последнего - 4
        numbers[0] = 100;                // Изменение первого элемента по индексу
        int invalidIndex = numbers[5];   // Ошибка IndexOutOfRangeException
        
        // Свойства
        int[] num = {1, 2, 3, 4, 5};
        int length = num.Length;   // Длина массива (равна кол-ву элементов)
        
        
        
        // МНОГОМЕРНЫЕ (ПРЯМОУГОЛЬНЫЕ) МАССИВЫ
        // Такие массивы имеют одинаковую длину всех подмассивов
        int[,] matrix1 = new int[3, 4];   // 3 строки, 4 столбца
        int[,] matrix2 = new int[,]
        {
            {1, 2, 3, 4, 5},
            {6, 7, 8, 9, 10},
            {11, 12, 13, 14, 15, 16}   // Ошибка
        };
        int[,] matrix3 =   // Сокращённая запись
        {
            {1, 2, 3, 4, 5},
            {6, 7, 8, 9, 10}
        };
        
        // Доступ к элементам и запись
        int[,] matrix =
        {
            {1, 2, 3, 4, 5},
            {6, 7, 8, 9, 10}
        };
        int elem7 = matrix[1, 2];   // 2 строка, 3 столбец
        matrix[1, 3] = 80;
        
        // Свойства
        int[,] mtrx1 =
        {
            {1, 2, 3, 4, 5},
            {6, 7, 8, 9, 10}
        };
        int colRows1 = mtrx1.GetLength(0);   // Для 2-мерной матрицы 0 - строки
        int colCols1 = mtrx1.GetLength(1);   // 1 - столбцы
        int[,,] mtrx2 =   // 3-мерная матрица
        {
            {
                {1, 2, 3},
                {4, 5, 6}
            },
            {
                {7, 8, 9},
                {10, 11, 12}
            }
        };
        int colLayers = mtrx2.GetLength(0);   // Для 3-мерной матрицы 0 - слои
        int colCols2 = mtrx2.GetLength(1);    // 1 - строки
        int colRows2 = mtrx2.GetLength(2);    // 2 - столбцы
        // GetLength принимает аргументом индекс мерности матрицы и возвращает длину этой мерности
        
        
        
        // ЗУБЧАТЫЕ МАССИВЫ
        // Такие массивы могут иметь разную длину своих подмассивов
        int[][] jaggedArray = new int[3][];      // Инициализация массива с 3 подмассивами
        jaggedArray[0] = new int[3] {1, 2, 3};   // Инициализация каждого отдельного подмассива
        jaggedArray[1] = new int[4] {4, 5, 6, 7};
        jaggedArray[2] = new int[5] {8, 9, 10, 11, 12};
        int[][] jaggedArray2 = new int[][]   // Сокращённая запись
        {
            new int[] {1, 2, 3},
            new int[] {4, 5, 6, 7}
        };
        int[][] jaggedArray3 =   // Ещё более сокращённая запись
        [
            [1, 2, 3],
            [4, 5]
        ];
        
        
        
        // БАЗОВЫЙ КЛАСС ARRAY И ЕГО МЕТОДЫ
        // Все массивы наследуются от класса System.Array, который имеет разные статические методы
        // Этот класс не позволяет создавать зубчатые массивы
        Array array1 = Array.CreateInstance(typeof(int), 3);              // Создание массивы длины 3
        Array array2 = Array.CreateInstance(typeof(int), 3, 4);   // Создание прямоугольного массива с 3 строками и 4 столбцами
        int[] source = { 1, 2, 3, 4, 5 };
        int[] destination = new int[5];
        Array.Copy(source, destination, 3);   // Копирует первые 3 элемента
        source.CopyTo(destination, 0);         // Копирует все элементы в destination начиная с индекса 0
        int[] clone = (int[])source.Clone();        // Создаёт неглубокую копию (для значимых типов всё хорошо, но для ссылочных изменения в любой из копий будут влиять на остальные копии)
        int[] nums = { 5, 3, 8, 1, 9 };
        // Поиск индекса элемента
        int index = Array.IndexOf(nums, 8);           // 2
        int lastIndex = Array.LastIndexOf(nums, 3);   // 1
        bool exists = Array.Exists(nums, element => element > 5);           // Проверка существования (true)
        int firstGreaterThan5 = Array.Find(nums, element => element > 5);   // Поиск первого подходящего элемента (8)
        Array.Sort(nums);      // Сортировка ({ 1, 3, 5, 8, 9 })
        Array.Reverse(nums);   // Обратный порядок ({ 9, 8, 5, 3, 1 })
        Array.Clear(nums, 0, nums.Length);   // Очистка (заполнение значениями по умолчанию) ({ 0, 0, 0, 0, 0 })
    }
}