
// ЗНАЧИМЫЕ ТИПЫ (Value Types)
// Что это? Переменные этих типов содержат свои данные напрямую. Когда ты присваиваешь одну value-type переменную другой, копируется значение
// Где хранятся? Они хранятся в области памяти под названием стек (stack). Работа со стеком очень быстрая
// К ним относятся: числовые типы, char, bool, struct (позже), enum (позже)

// 1. Целые числа (со знаком)
sbyte sbVar = 120;        // 1 байт (-128 до 127)
short shVar = 10000;      // 2 байта (-32,768 до 32,767)
int iVar = 1000000;       // 4 байта (-2,1 млрд до 2.1 млрд)
long lVar = 1000000000;   // 8 байт (очень много)

// 2. Целые числа (без знака)
byte bVar = 250;            // 1 байт (0 до 255)
ushort ushVar = 50000;      // 2 байта (0 до 65,535)
uint uiVar = 4000000;       // 4 байта (0 до 4.2 млрд)
ulong ulVar = 1000000000;   // 8 байт (0 до очень большое число)

// 3. Числа с плавающей точкой (для дробных чисел)
float  fVar = 3.14F;     // 4 байта (~6-9 знаков), суффикс 'F'
double dVar = 3.1415;    // 8 байта (~15-17 знаков)
decimal dmVar = 3.14M;   // 16 байт (для финансовых расчетов, высокая точность), суффикс 'M'

// 4. Логический тип (только true и false)
bool isAlive = true;      // Истина
bool isEnabled = false;   // Ложь

// 5. Символьный тип
char symbol = 'a';     // 2 байта (хранит один символ Unicode в одинарных кавычках)
char newLine = '\n';   // Управляющая последовательность для новой строки

// Поведение
// При присваивании значение копируется
int a = 10;
int b = a;
Console.WriteLine($"a={a}, b={b}");
b = 20;
Console.WriteLine($"a={a}, b={b}");



// ССЫЛОЧНЫЕ ТИПЫ (Reference Types)
// Что это? Переменные этих типов не содержат данные напрямую, а содержат ссылку (адрес в памяти) на область, где эти данные хранятся
// Где хранятся? Данные (объекты) хранятся в области памяти под названием куча (heap). Сама переменная (ссылка) хранится в стеке
// К ним относятся: string, массивы (позже), class (позже), interface (позже), delegate (позже)

// 1. Строки
string name = "Alice";

// 2. Массивы
int[] intArray = [1, 2, 3, 4, 5];
string[] strArray = ["Alice", "Bob", "Clare"];

// Поведение
// Строки ведут себя по-особенному: это ссылочный тип, но при изменении значения по ссылке создаётся новое значение
string name1 = "Alice";
string name2 = name1;
Console.WriteLine($"name1={name1}, name2={name2}");
name2 = "Bob";
Console.WriteLine($"name1={name1}, name2={name2}");
// Другие ссылочные типы ведут себя одинаково: при изменении значения по ссылке меняются все переменные, которые ссылались на это значение
int[] integerArray1 = [1, 2, 3, 4, 5];
int[]  integerArray2 = integerArray1;
Console.WriteLine($"integerArray1={string.Join(", ", integerArray1)}, integerArray2={string.Join(", ", integerArray2)}");
integerArray2[0] = 0;
Console.WriteLine($"integerArray1={string.Join(", ", integerArray1)}, integerArray2={string.Join(", ", integerArray2)}");



// КЛЮЧЕВОЕ СЛОВО null
// null - значение по умолчанию для ссылочных типов
string s1 = null;
Console.WriteLine($"s1={s1}");
// Значимые типы обычно не могут быть null, но могут принимать такое значение с помощью суффикса ?
// int i = null; - ошибка
int? i = null;
Console.WriteLine($"i={i}");
